---
# Playbook to install required packages

- name: Install required packages
  hosts: all

  vars:
    path: "/home/{{ ansible_user }}"

  vars_files:
    - secrets.yaml

  tasks:
    - name: Update
      become: true
      ansible.builtin.apt:
        autoclean: true
        autoremove: true
        cache_valid_time: 3600
        clean: true
        update_cache: true
        upgrade: "full"

    - name: Install required packages
      become: true
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
          - python3-venv
          - unzip
        state: present
        update_cache: true

    - name: Add Docker module repository
      become: true
      ansible.builtin.deb822_repository:
        name: docker
        types: [ deb ]
        uris: "https://download.docker.com/linux/{{ ansible_distribution | lower }}"
        signed_by: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        suites: [ "{{ ansible_distribution_release | lower }}" ]
        components: [ stable ]
        state: present
        enabled: true

    - name: Install Docker and related packages
      become: true
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to Docker group
      become: true
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Reset ssh connection
      ansible.builtin.meta: reset_connection

    - name: Enable and start Docker services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service

    - name: Download AWS CLI
      ansible.builtin.get_url:
        url: https://s3.amazonaws.com/aws-cli/awscli-bundle.zip
        dest: "{{ path }}/cli.zip"
        mode: "0440"

    - name: Unarchive the installer
      ansible.builtin.unarchive:
        src: "{{ path }}/cli.zip"
        dest: "{{ path }}"
        remote_src: true

    - name: Install CLI
      become: true
      ansible.builtin.command: python3 ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      changed_when: true

    - name: Configure CLI
      no_log: true
      ansible.builtin.command: aws configure set "{{ item.key }}" "{{ item.value }}"
      loop:
        - { key: "aws_access_key_id", value: "{{ access_key }}" }
        - { key: "aws_secret_access_key", value: "{{ secret_key }}" }
        - { key: "region", value: eu-central-1 }
      changed_when: true

    - name: Login to ECR
      ansible.builtin.shell:
        cmd: aws ecr get-login-password | docker login --username AWS --password-stdin "{{ repository }}"
      changed_when: true

    - name: Delete files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - cli.zip
        - awscli-bundle
